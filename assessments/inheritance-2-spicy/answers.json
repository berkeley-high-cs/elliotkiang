[
  "public class Expression {\n  private int precedence = 0;\n\n  public Expression(int num) {\n    precedence = num; \n  }\n\n  public double evaluate() {\n    return Double.NaN;\n  } \n\n  public int getPrecedence(){\n    return precedence; \n  }\n  public boolean higherPrecedanceThan(Expression otherExp){\n    return this.precedence > otherExp.getPrecedence();\n  }\n}\n\n\n\n\n\n",
  "public class Number extends Expression {\n\n  private double value = 0;\n\n  public Number(double val) {\n    value = val;\n    super.Expression(1);\n  }\n\n  public double evaluate() {\n    return this.value;\n  }\n  public String toString(){\n    return value.toString();\n  }\n}\n\n\n\n\n\n",
  "public class BinaryOperator extends Expression {\n\n  private String operator = \"\";\n\n  public BinaryOperator(int precedence, String op) {\n    firstExp = new Expression();\n    secondExp = new Expression();\n    super.Expression(precedence);\n    operator = op;\n  }\n\n  public getLeft() {\n    return firstExp;\n  }\n\n  public getRight() {\n    return secondExp;\n  }\n\n  public String toString() {\n    return firstExp.toString() + \" \" + operator + \" \" + secondExp.toString(); //not going to try for the wrapping right now\n  }\n}\n",
  "public class Addition extends BinaryOperator {\n\n  public Addition(double first, double second) {\n    firstNum = new Number(first);\n    secondNum = new Number(second);\n    super.Expression(3);\n  }\n\n  public double evaluate() {\n    return firstNum + secondNum;\n  }\n  public String toString(){\n    return firstNum + \n  }\n}\n\n\n\n\n\n"
]