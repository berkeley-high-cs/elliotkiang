[
  "public class Expression {\n\n  public Expression() {} //is this the right implementation?\n\n  public double evaluate() {\n    return Double.NaN;\n  }\n}\n",
  "public class Number extends Expression {\n\n  private double value = 0;\n\n  public Number(double val) {\n    value = val;\n  }\n\n  public double evaluate() {\n    return this.value;\n  }\n}\n",
  "public class BinaryOperator extends Expression {\n\n  //does this need to have private variables for firstExp and secondExp?\n  public BinaryOperator() {\n    firstExp = new Expression();\n    secondExp = new Expression();\n  }\n\n  public getLeft() {\n    return firstExp;\n  }\n\n  public getRight() {\n    return secondExp;\n  }\n}\n",
  "public class Addition extends BinaryOperator {\n\n  //does this need to have private variables for firstNum and secondNum?\n  public Addition(double first, double second) {\n    firstNum = new Number(first);\n    secondNum = new Number(second);\n  }\n\n  public double evaluate() {\n    return this.firstNum + this.secondNum;\n  }\n}\n",
  "public class Multiplication extends Expression {\n\n  //same question here\n  public Addition(double first, double second) {\n    firstNum = new Number(first);\n    secondNum = new Number(second);\n  }\n\n  public double evaluate() {\n    return this.firstNum * this.secondNum;\n  }\n}\n",
  "public class LoggingAddition extends Expression {\n\n  //ditto\n  public LoggingAddition(double first, double second) {\n    firstNum = new Number(first);\n    secondNum = new Number(second);\n  }\n\n  public double evaluate() {\n    System.out.println(this.firstNum + \" + \" + this.secondNum);\n    return this.firstNum + this.secondNum;\n  }\n}\n"
]